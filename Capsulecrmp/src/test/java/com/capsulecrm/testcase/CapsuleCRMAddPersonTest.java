package com.capsulecrm.testcase;

import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import com.capsulecrm.genericlib.BaseClass;
import com.capsulecrm.objectrepositry.AccountSetting;
import com.capsulecrm.objectrepositry.AddPerson;
import com.capsulecrm.objectrepositry.AppearancePage;
import com.capsulecrm.objectrepositry.CasesPage;
import com.capsulecrm.objectrepositry.HomePage;
import com.capsulecrm.objectrepositry.IntegrationPage;
import com.capsulecrm.objectrepositry.OppertunitesPage;
import com.capsulecrm.objectrepositry.TagsPage;
import com.capsulecrm.objectrepositry.TrackPage;
import com.capsulecrm.objectrepositry.TrashPage;
import com.capsulecrm.objectrepositry.UsersPage;
/**
 * 
 * @author Ranjeet Kumar on 1/jun/2019
 *
 */
@Listeners(com.capsulecrm.genericlib.ListenerImpClass.class)
public class CapsuleCRMAddPersonTest extends BaseClass {
	@Test(priority=1)
	public void verifyAddPerson_TC_001() throws Throwable {
		logger.info("-------- started verifyAddPerson_TC_001 --------");
		logger.info("navigate to add person");
		HomePage HP = PageFactory.initElements(Driver, HomePage.class);
		logger.info("navigate to add person");
		AddPerson AP = PageFactory.initElements(Driver, AddPerson.class);
		logger.info("navigate to case page");
		CasesPage CP = PageFactory.initElements(Driver, CasesPage.class);
		logger.info("click person icon and add a person");
		HP.clkPersonIcone();
		logger.info("click add person");
		AP.clkAddPersonBtn();
		logger.info("fill the form");
		AP.dropDownBoxTitle("Mr");
		logger.info("read data from Excell");
		AP.firstName(flib.getExcellData("New Person", 2, 0));
		AP.lastName(flib.getExcellData("New Person", 1, 1));
		AP.jobTitle(flib.getExcellData("New Person", 1, 2));
		AP.tags(flib.getExcellData("New Person", 1, 3));
		AP.orgnisation(flib.getExcellData("New Person", 1, 4));
		logger.info("generate the random phone number");
		String phoneNo = AddPerson.randomeNum();
		logger.info(phoneNo);
		AP.phoneNumber(phoneNo);
		logger.info("Work");
		AP.selectPhone("Work");
		logger.info("generate the random email id");
		String emailId = AddPerson.randomestring() + "@gmail.com";
		logger.info("emailId");
		AP.emailID(emailId);
		logger.info("select work");
		AP.selectEmail("Work");
		logger.info("read the data from Excells");
		AP.socialNetwork(flib.getExcellData("New Person", 1, 5));
		logger.info("select twitter");
		AP.selectSocialNtwrk("Twitter");
		logger.info("Home");
		AP.selectSocialWebSite("Home");
		logger.info("clk save Button");
		AP.clkSaveBtn();
		logger.info("click case button");
		CP.clkCasesBtn();
		logger.info("clk add case button");
		CP.clkAddCaseBtn();
		logger.info("read the data from Excel");
		CP.firstname(flib.getExcellData("New Person", 2, 0));
		logger.info("get the data form common data ");
		CP.description(flib.getpropertyKeyvalue("Description"));
		logger.info("read the data from Excel");
		CP.tags(flib.getExcellData("New Person", 2, 3));
		logger.info("click save button");
		CP.clkSaveBtn();
		logger.info("verify the case status code result");
		String expResult = "Open";
		String actResult = CP.status().getText();
		logger.info("actResult");
		Reporter.log("status case is: " + actResult, true);
		Assert.assertEquals(expResult, actResult);
	}

	@Test(priority=2)
	public void verifyAccountSetting_TC_002() throws Throwable {
		logger.info("-------------- statrted verifyAccountSetting_TC_002 case -----------------");
		logger.info("navigate to home page");
		HomePage HP = PageFactory.initElements(Driver, HomePage.class);
		logger.info(" navigate to new user ");
		UsersPage UP = PageFactory.initElements(Driver, UsersPage.class);
		logger.info(" navigate to track page ");
		TrackPage TP = PageFactory.initElements(Driver, TrackPage.class);
		logger.info("navigate to Account setting ");
		AccountSetting AS = PageFactory.initElements(Driver, AccountSetting.class);
		logger.info("navigate to AppearancePage ");
		AppearancePage AP=PageFactory.initElements(Driver, AppearancePage.class);
		logger.info("navigate to Oppertunites page ");
		OppertunitesPage OP=PageFactory.initElements(Driver, OppertunitesPage.class);
		logger.info(" click account profile at left top corrner ");
		HP.accountProfile();
		logger.info(" click on account setting page ");
		HP.clkAccountSetting();
		logger.info(" verify account setting page header ");
		String expHeader = "Account Settings";
		String actHeader = AS.acoountSettinHeader().getText();
		logger.info("actHeader");
		Assert.assertEquals(expHeader, actHeader);
		logger.info("clk on account link");
		AS.clkAccountLink();
		logger.info(" verify  account header ");
		String expAccounthdr = "Account";
		Assert.assertEquals(AS.accountHeader().getText(), expAccounthdr);
		logger.info(AS.accountHeader().getText());
		logger.info("clk invoice link");
		AS.clkInvoiceLink();
		logger.info("verify invoice header");
		String expInvoice = "Invoices";
		Assert.assertEquals(AS.invoiceHeader().getText(), expInvoice);
		logger.info("clk export link");
		AS.clkExportLink();
		logger.info("verify the export header");
		String expExport = "Export";
		Assert.assertEquals(AS.exportHeader().getText(), expExport);
		logger.info("clk appearance link");
		AP.clkAppearanceLink();
		logger.info("verify appearance heade");
		String expAppearance = "Appearance";
		Assert.assertEquals(AP.apperanceHeader().getText(), expAppearance);
		logger.info(AP.apperanceHeader().getText());
		AP.clkChoseFileBtn();
		logger.info("clk mail link");
		AS.clkMailDropBox();
		logger.info("verify the mailbox");
		String expmailDrop = "Mail Drop Box";
		Assert.assertEquals(AS.mailDropHeader().getText(), expmailDrop);
		logger.info("clk users link");
		UP.clkUsers();
		logger.info("verify the usersheader");
		String expuserheader = "Users";
		Assert.assertEquals(expuserheader, UP.usersHeader().getText());
		logger.info(UP.usersHeader().getText());
		UP.clkAddNewuserBtn();
		logger.info("click add new user button");
		logger.info("read data from excel sheet");
		UP.firstname(flib.getExcellData("New Person", 1, 0));
		logger.info("read data from excel sheet");
		UP.lastName(flib.getExcellData("New Person", 1, 1));
		logger.info("it will generate random Email id");
		String emailId = AddPerson.randomestring() + "@gmail.com";
		logger.info("emailId");
		UP.emailAddress(emailId);
		logger.info("read data from excel file");
		UP.userName(flib.getExcellData("New Person", 1, 0));
		logger.info("invite user ");
		UP.inviteUser();
		logger.info("click the oppotunites link");
		OP.clkOpportunities();
		logger.info("verify the oppertunites header");
		String expOppertunites = "Opportunities";
		Assert.assertEquals(OP.OpportunitiesHeader().getText(), expOppertunites);
		logger.info(OP.OpportunitiesHeader().getText());
		OP.clkAddnewMileStone();
		logger.info("click add new user ");
		String addName = AddPerson.randomestring();
		logger.info(addName);
		OP.name(addName);
		logger.info("read the data from property file");
		OP.description(flib.getpropertyKeyvalue("Descriptionm"));
		logger.info("read the data from property file");
		OP.probabilityWining(flib.getpropertyKeyvalue("txtProbWining"));
		logger.info("read the data from property file");
		OP.daysUntilStale(flib.getpropertyKeyvalue("daysuntilstale"));
		logger.info("clk save button ");
		OP.clkBtnSave();
		logger.info("verify the track header file");
		TP.clkTrackLink();
		logger.info("verify the track header page");
		String expTrachHeader = "Tracks";
		String actTrachHeader = TP.trackHeader().getText();
		Assert.assertEquals(actTrachHeader, expTrachHeader);
		logger.info("actTrachHeader");
		TP.clkBtnAddNewTrack();
		logger.info("read the data from excel file");
		TP.newOPPTrackName(flib.getExcellData("New Person", 1, 1));
		logger.info("read the data from excel file");
		TP.trackTag(flib.getExcellData("New person", 1, 4));
		logger.info("read the data from property file");
		TP.taskDescription(flib.getpropertyKeyvalue("Descriptionm"));
		logger.info("click select category");
		TP.clkSelectCategory();
		logger.info("read data from properties");
		TP.txtDue(flib.getpropertyKeyvalue("due"));
		logger.info("select weekdays");
		TP.selectDays("weekdays");
		logger.info("select assign");
		TP.selectAsignee("Ranjeet Sargent");
		logger.info("click save button");
		TP.clkSaveBtn();
	}
	@Test(priority=3)
	public void verifyAccountSetting_TC_003() throws Exception {
		logger.info("-----------Started verifyAccountSetting_TC_003 case----------- ");
		logger.info("   navigate to Account setting  page   ");
		AccountSetting AS = PageFactory.initElements(Driver, AccountSetting.class);
		logger.info(" navigate to Home Page ");
		HomePage HP = PageFactory.initElements(Driver, HomePage.class);
		logger.info(" navigate to trash factory ");
		TrashPage TP = PageFactory.initElements(Driver, TrashPage.class);
		logger.info("navigate to integration page ");
		IntegrationPage IP = PageFactory.initElements(Driver, IntegrationPage.class);
		logger.info(" navigate to Tags Page ");
		TagsPage TgP = PageFactory.initElements(Driver, TagsPage.class);
		logger.info("click account profile");
		HP.accountProfile();
		logger.info("click account setting page ");
		HP.clkAccountSetting();
		logger.info("click task category ");
		AS.clkTaskCategories();
		logger.info("click add new Category");
		AS.clkAddNewCategory();
		logger.info("print random name");
		String CName = AddPerson.randomestring();
		AS.taskCatgName(CName);
		logger.info("click save button");
		AS.clktskCatBtnSave();
		TgP.clkTagsLink();
		logger.info("Enter the Tags page");
		logger.info("verify the Tags header");
		String expResult = "Tags and DataTags";
		String actTagsandDHead = TgP.tagsAndDatatagsHeader().getText();
		logger.info(actTagsandDHead);
		Assert.assertEquals(actTagsandDHead, expResult);
		logger.info("click add new tag");
		TgP.clkAddNewTag();
		logger.info("print random persion name");
		String TName = AddPerson.randomestring();
		TgP.addTagName(TName);
		logger.info("click save button");
		TgP.clkAddSaveBtn();
		logger.info("Entered integration page");
		IP.clkIntegrationLink();
		logger.info("verify integration header");
		String expIntgrartion = "Integrations";
		String actIntgration = IP.integrationHeader().getText();
		logger.info(actIntgration);
		Assert.assertEquals(actIntgration, expIntgrartion);
		int count = IP.countConfigLink().size();
		logger.info("total configuration size: " + count);
		Reporter.log("total configuration size: " + count, true);
		logger.info("Enterd th Trash page");
		TP.clkTrashLink();
		logger.info("verify the Trash header");
		String expTrash = "Trash";
		String actTrash = TP.verifyTrashHeader().getText();
		logger.info(actTrash);
		Assert.assertEquals(actTrash, expTrash);
	}

	

}
